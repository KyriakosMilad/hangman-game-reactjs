{"version":3,"sources":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","Hangman.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Hangman","props","answer","state","nWrong","guessed","Set","guessedRightDigits","won","getNewAnswer","bind","handleGuess","newGame","words","Math","floor","random","length","this","split","map","ltr","has","numberOfDigists","forEach","element","evt","target","value","includes","getDigitsNumberOfLetterInWord","setState","st","add","index","key","onClick","disabled","maxWrong","className","src","images","alt","style","display","width","guessedWord","generateButtons","Component","defaultProps","img0","img1","img2","img3","img4","img5","img6","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.213b470c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c80394c2.jpg\";","import React, { Component } from 'react';\nimport './Hangman.css';\nimport img0 from './0.jpg';\nimport img1 from './1.jpg';\nimport img2 from './2.jpg';\nimport img3 from './3.jpg';\nimport img4 from './4.jpg';\nimport img5 from './5.jpg';\nimport img6 from './6.jpg';\n\nclass Hangman extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tif (this.props.answer) {\n\t\t\tthis.state = {\n\t\t\t\tnWrong: 0,\n\t\t\t\tguessed: new Set(),\n\t\t\t\tguessedRightDigits: 0,\n\t\t\t\tanswer: this.props.answer,\n\t\t\t\twon: false,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.state = {\n\t\t\t\tnWrong: 0,\n\t\t\t\tguessed: new Set(),\n\t\t\t\tguessedRightDigits: 0,\n\t\t\t\tanswer: this.getNewAnswer(),\n\t\t\t\twon: false,\n\t\t\t};\n\t\t}\n\n\t\tthis.getNewAnswer = this.getNewAnswer.bind(this);\n\t\tthis.handleGuess = this.handleGuess.bind(this);\n\t\tthis.newGame = this.newGame.bind(this);\n\t}\n\n\t/** by default, allow 6 guesses. */\n\tstatic defaultProps = {\n\t\timages: [img0, img1, img2, img3, img4, img5, img6],\n\t\tmaxWrong: 6,\n\t};\n\n\tgetNewAnswer() {\n\t\tconst words = [\n\t\t\t'apple',\n\t\t\t'man',\n\t\t\t'women',\n\t\t\t'men',\n\t\t\t'woman',\n\t\t\t'pen',\n\t\t\t'pencil',\n\t\t\t'hang',\n\t\t\t'hold',\n\t\t\t'theater',\n\t\t\t'cinema',\n\t\t\t'milk',\n\t\t\t'yellow',\n\t\t\t'pink',\n\t\t\t'mom',\n\t\t\t'dad',\n\t\t\t'space',\n\t\t\t'left',\n\t\t\t'banana',\n\t\t\t'window',\n\t\t\t'door',\n\t\t];\n\n\t\treturn words[Math.floor(Math.random() * words.length)];\n\t}\n\n\t/** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n\tguessedWord() {\n\t\treturn this.state.answer\n\t\t\t.split('')\n\t\t\t.map((ltr) => (this.state.guessed.has(ltr) ? ltr : '_'));\n\t}\n\n\t/** check duplicated letters */\n\tgetDigitsNumberOfLetterInWord(ltr) {\n\t\tlet numberOfDigists = 0;\n\t\tthis.state.answer.split('').forEach((element) => {\n\t\t\tif (ltr === element) {\n\t\t\t\tnumberOfDigists++;\n\t\t\t}\n\t\t});\n\t\treturn numberOfDigists;\n\t}\n\n\t/** handleGuess: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n\thandleGuess(evt) {\n\t\tlet won = false;\n\t\tlet ltr = evt.target.value;\n\t\tif (\n\t\t\tthis.state.answer.includes(ltr) &&\n\t\t\tthis.state.answer.length === this.state.guessedRightDigits + this.getDigitsNumberOfLetterInWord(ltr)\n\t\t) {\n\t\t\twon = true;\n\t\t}\n\t\tthis.setState((st) => ({\n\t\t\tguessed: st.guessed.add(ltr),\n\t\t\tguessedRightDigits: st.guessedRightDigits + this.getDigitsNumberOfLetterInWord(ltr),\n\t\t\tnWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1),\n\t\t\twon: won,\n\t\t}));\n\t}\n\n\t/** generateButtons: return array of letter buttons to render */\n\tgenerateButtons() {\n\t\treturn 'abcdefghijklmnopqrstuvwxyz'.split('').map((ltr, index) => (\n\t\t\t<button\n\t\t\t\tkey={index}\n\t\t\t\tvalue={ltr}\n\t\t\t\tonClick={this.handleGuess}\n\t\t\t\tdisabled={\n\t\t\t\t\tthis.state.guessed.has(ltr) ||\n\t\t\t\t\tthis.state.won ||\n\t\t\t\t\tthis.state.nWrong >= this.props.maxWrong\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{ltr}\n\t\t\t</button>\n\t\t));\n\t}\n\n\tnewGame() {\n\t\tthis.setState((st) => ({\n\t\t\tguessed: new Set(),\n\t\t\tguessedRightDigits: 0,\n\t\t\tnWrong: 0,\n\t\t\tanswer: this.getNewAnswer(),\n\t\t\twon: false,\n\t\t}));\n\t}\n\n\t/** render: render game */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Hangman\">\n\t\t\t\t<h1>Hangman</h1>\n\t\t\t\t{this.state.nWrong >= 0 &&\n\t\t\t\tthis.state.nWrong < this.props.maxWrong &&\n\t\t\t\t!this.state.won ? (\n\t\t\t\t\t<img src={this.props.images[this.state.nWrong]} alt=\"game_status\" />\n\t\t\t\t) : this.state.won ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span style={{ display: 'block' }}>\n\t\t\t\t\t\t\tYou Won, you gessed it right.\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<button style={{ width: 'auto' }} onClick={this.newGame}>\n\t\t\t\t\t\t\tPlay Again\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span style={{ display: 'block' }}>\n\t\t\t\t\t\t\tYou Died, the word is: ({this.state.answer})\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<button style={{ width: 'auto' }} onClick={this.newGame}>\n\t\t\t\t\t\t\tPlay Again\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<span style={{ display: 'block' }}>\n\t\t\t\t\tWrong Gusses: {this.state.nWrong > 0 ? this.state.nWrong : 0}\n\t\t\t\t</span>\n\t\t\t\t<p className=\"Hangman-word\">{this.guessedWord()}</p>\n\t\t\t\t<p className=\"Hangman-btns\">{this.generateButtons()}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Hangman;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Hangman from \"./Hangman\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Hangman />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}